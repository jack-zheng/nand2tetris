// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let freeList = 2048;
        let heap = freeList;
        let heap[0] = 0;
        // (16384-1) - 2048 + 1 - 2
        // last node - start position + 1 - tow used node(heap[0], heap[1])
        let heap[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int block;
        var int currentSize;

        let heap = freeList;
        let currentSize = heap[1];
        // if heap !=0 and currentSize is less than required, try with next node
        while((~(heap=0)) & (currentSize < size + 2)){
            let heap = heap[0];
            let currentSize = heap[1];
        }

        if (heap = 0) {
            do Sys.error(0);
        }

        // update current heap size
        let heap[1] = currentSize - size - 2;

        // create new segment
        // 2 = heap[0], heap[1]
        let block = (heap + 2 + currentSize) - size;
        let heap = block - 2;
        let heap[0] = 0;
        let heap[1] = size;

        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let heap = o - 2;
        let heap[0] = freeList;
        let freeList = heap;

        return;
    }    
}
