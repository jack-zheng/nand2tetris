class Math {
    static Array bitArray;

    /** Initializes the library. */
    function void init() {
        let bitArray = Array.new(16);
        let bitArray[0] = 1;
        let bitArray[1] = 2;
        let bitArray[2] = 4;
        let bitArray[3] = 8;
        let bitArray[4] = 16;
        let bitArray[5] = 32;
        let bitArray[6] = 64;
        let bitArray[7] = 128;
        let bitArray[8] = 256;
        let bitArray[9] = 512;
        let bitArray[10] = 1024;
        let bitArray[11] = 2048;
        let bitArray[12] = 4096;
        let bitArray[13] = 8192;
        let bitArray[14] = 16384;
        // the first MSB of A command is 0, so use + instead
        let bitArray[15] = 16384 + 16384; //Integer constant too big
        return;
    }

    function boolean bit(int x, int pos) {
        return ~((x & bitArray[pos]) = 0);
    }

    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    function int multiply(int x, int y) {
        var int sum, shiftX, pos;
        let sum = 0;
        let shiftX = x;
        let pos = 0;

        while (pos < 16) {
            if (Math.bit(y, pos)) {
                let sum = sum +  shiftX;
            }

            let shiftX = shiftX + shiftX;
            let pos = pos + 1;
        }
        return sum;
    }

    function int divide(int x, int y) {
        var boolean isNegX, isNegY;
        var int q, result;

        let isNegX = x < 0;
        let isNegY = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }

        let q = Math.divide(x, 2*y);
        if (x - (2*q*y) < y) {
            let result = 2*q;
        } else {
            let result = 2*q + 1;
        }

        // same sign, return; else nag and return
        if (isNegX = isNegY) {
            return result;
        } else {
            return -result;
        }
    }

    function int sqrt(int x) {
        var int j, y;
        var int approx;
        var int approx_squared;

        let y = 0;
        let j = 7;      // = #bits / 2 - 1
        while( ~(j < 0) ) {
            let approx = y + bitArray[j];
            let approx_squared = approx * approx;
            if( ~(approx_squared > x) & (approx_squared > 0) ) {    // in case of overflow
                let y = approx;
            }
            let j = j - 1;
        }
        return y;
    }

    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    function int min(int a, int b) {
        if (a > b) {
            return b;
        } else {
            return a;
        }
    }
}
