// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    static int CHAR_0;
    field int max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let str = Array.new(maxLength);
        }
        let length = 0;
        let max = maxLength;

        let CHAR_0 = 48;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (max > 0) {
            do Array.dispose(str);
        }

        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < length) {
            return str[j];
        }
        return 0;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < length) {
            let str[j] = c;
        }

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < max) {
            // length increase;
            let str[length] = c;
            let length = length + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (~(length < 0)) {
        // change the length is enough, I think
        let length = length - 1;
        }

        return ;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val;
        var int i;
        var boolean isNeg;

        let val = 0;
        let i = 0;
        let isNeg = false;

        if (str[i] = 45) {
            let isNeg = true;
            let i = i + 1;
        }

        while (i < length) {
            // check if char is a number   48 <= c <= 57
            if ((str[i] < 48) | (str[i] > 57)) {
                // return val if find a non number char
                return val;
            }

            let val = val * 10 + (str[i] - CHAR_0);
            let i = i + 1;
        }

        if (isNeg) {
            return -val;
        }

        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // reset length
        let length = 0;

        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }

        do int2String(val);
        return ;
    }

    method void int2String(int val) {
        var int div;
        var int mod;

        // let lastDigit = val % 10;
        let div = val / 10;
        let mod = val - (div * 10);

        if (val < 10) {
            do appendChar(CHAR_0 + mod);
        } else {
            do int2String(val/10);
            do appendChar(CHAR_0 + mod);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
