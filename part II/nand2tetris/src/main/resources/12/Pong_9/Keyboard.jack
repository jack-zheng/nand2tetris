// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int KB;
    static int CURSOR_MARK;

    /** Initializes the keyboard. */
    function void init() {
        let KB = 24576;
        let CURSOR_MARK = 95;

        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(KB);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char c;

        // use _ as the cursor mark
        do Output.printChar(CURSOR_MARK);
        while (Keyboard.keyPressed() = 0) {
            // do nothing
        }

        let c = Keyboard.keyPressed();
        while (~(Keyboard.keyPressed() = 0)) {
            // do nothing
        }

        // delete cursor mark in current position
        do Output.backSpace();
        // display pressed key
        do Output.printChar(c);

        return c;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String line;
        var char c;

        // print message on screen first
        do Output.printString(message);

        let line = String.new(64);
        // waiting for input till press return
        while (true) {
            let c = Keyboard.readChar();
            if (c=String.newLine()) {
                // display newline
                do Output.println();
                return line;
            } else {
                // when press backspace, it already deleted from UI, so no need to delete after erase from line
                // PS: there is a bug, we can delete message on UI, not make sense
                if (c=String.backSpace()) {
                    // remove last char from line
                    if (line.length() > 0) {
                        do line.eraseLastChar();
                        // do Output.backSpace();
                    }
                } else {
                    do line.appendChar(c);
                }
            }
        }

        return line;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String inputStr;
        let inputStr = Keyboard.readLine(message);

        return inputStr.intValue();
    }
}
