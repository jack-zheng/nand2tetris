// sys init 
@256
@D=A
@SP
M=D
// call Sys.init 0
@RETURN_ADDR_0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@0
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0,JMP
(RETURN_ADDR_0)
// function Main.fibonacci
(Main.fibonacci)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=D-M
@GT0
D,JGT
@SP
A=M-1
M=0
@END0
0,JMP
(GT0)
@SP
A=M-1
M=-1
(END0)
// if-goto IF_TRUE
@SP
AM=M-1
D=M
@Main.fibonacci$IF_TRUE
D,JNE
// goto IF_FALSE
@Main.fibonacci$IF_FALSE
0,JMP
// label IF_TRUE
(Main.fibonacci$IF_TRUE)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//  return
//  FRAME = LCL
@LCL
D=M
@FRAME
M=D
//  RET = *(FRAME - 5)
@5
A=D-A
D=M
@RET
M=D
//  *ARG = pop()
@SP
A=M-1
D=M
@ARG
A=M
M=D
//  SP = ARG + 1
@ARG
D=M+1
@SP
M=D
//  THAT = *(FRAME - 1)
@1
D=A
@FRAME
A=M-D
D=M
@THAT
M=D
//  THAT = *(FRAME - 2)
@2
D=A
@FRAME
A=M-D
D=M
@THIS
M=D
//  THAT = *(FRAME - 3)
@3
D=A
@FRAME
A=M-D
D=M
@ARG
M=D
//  THAT = *(FRAME - 4)
@4
D=A
@FRAME
A=M-D
D=M
@LCL
M=D
@RET
A=M
0,JMP
// label IF_FALSE
(Main.fibonacci$IF_FALSE)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Main.fibonacci 1
@RETURN_ADDR_1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0,JMP
(RETURN_ADDR_1)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Main.fibonacci 1
@RETURN_ADDR_2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0,JMP
(RETURN_ADDR_2)
// add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//  return
//  FRAME = LCL
@LCL
D=M
@FRAME
M=D
//  RET = *(FRAME - 5)
@5
A=D-A
D=M
@RET
M=D
//  *ARG = pop()
@SP
A=M-1
D=M
@ARG
A=M
M=D
//  SP = ARG + 1
@ARG
D=M+1
@SP
M=D
//  THAT = *(FRAME - 1)
@1
D=A
@FRAME
A=M-D
D=M
@THAT
M=D
//  THAT = *(FRAME - 2)
@2
D=A
@FRAME
A=M-D
D=M
@THIS
M=D
//  THAT = *(FRAME - 3)
@3
D=A
@FRAME
A=M-D
D=M
@ARG
M=D
//  THAT = *(FRAME - 4)
@4
D=A
@FRAME
A=M-D
D=M
@LCL
M=D
@RET
A=M
0,JMP
// function Sys.init
(Sys.init)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
@RETURN_ADDR_3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0,JMP
(RETURN_ADDR_3)
// label WHILE
(Sys.init$WHILE)
// goto WHILE
@Sys.init$WHILE
0,JMP
